from typing import List, Dict, Optional, Any
from lightrag.utils import logger

class ActivityCategoriesManager:
    def __init__(self):
        # Liste des cat√©gories pr√©d√©finies
        self._categories = {
            "Restauration": [
                "restaurant", "caf√©", "bar", "bistro", "brasserie", 
                "gastronomie", "cuisine", "repas", "d√©jeuner", "d√Æner"
            ],
            "Culture et Loisirs": [
                "concert", "exposition", "mus√©e", "th√©√¢tre", "cin√©ma", 
                "spectacle", "art", "festival", "√©v√©nement culturel"
            ],
            "Sport et Fitness": [
                "sport", "gym", "fitness", "match", "comp√©tition", 
                "entra√Ænement", "course", "cyclisme", "natation"
            ],
            "Voyage et Tourisme": [
                "voyage", "tourisme", "excursion", "visite", "randonn√©e", 
                "s√©jour", "destination", "circuit"
            ],
            "Formation et √âducation": [
                "cours", "formation", "atelier", "s√©minaire", "conf√©rence", 
                "workshop", "apprentissage", "√©cole"
            ],
            "Bien-√™tre et Sant√©": [
                "spa", "massage", "yoga", "m√©ditation", "relaxation", 
                "soins", "bien-√™tre", "sant√©"
            ],
            "√âv√©nements Professionnels": [
                "networking", "conf√©rence", "salon", "r√©union", "s√©minaire", 
                "business", "professionnel", "entreprise"
            ],
            "Unknown": []  # Cat√©gorie explicite pour les activit√©s non class√©es
        }
        
        # Cat√©gorie par d√©faut si aucune correspondance n'est trouv√©e
        self._default_category = "Unknown"
    
    def get_category(self, description: str) -> str:
        """
        D√©termine la cat√©gorie d'une activit√© en fonction de sa description
        """
        description_lower = description.lower()
        
        logger.info(f"üîç Recherche de cat√©gorie pour la description : {description_lower}")
        
        for category, keywords in self._categories.items():
            # Ignorer la cat√©gorie "Unknown"
            if category == "Unknown":
                continue
            
            matching_keywords = [keyword for keyword in keywords if keyword in description_lower]
            if matching_keywords:
                logger.info(f"‚úÖ Cat√©gorie trouv√©e : {category}")
                logger.info(f"   Mots-cl√©s correspondants : {matching_keywords}")
                return category
        
        logger.warning(f"‚ùå Aucune cat√©gorie trouv√©e, utilisation de la cat√©gorie par d√©faut : {self._default_category}")
        return self._default_category
    
    def add_category(self, category_name: str, keywords: List[str]):
        """
        Permet d'ajouter une nouvelle cat√©gorie personnalis√©e
        """
        self._categories[category_name] = keywords
    
    def list_categories(self) -> List[str]:
        """
        Retourne la liste de toutes les cat√©gories
        """
        return list(self._categories.keys())
    
    async def ensure_categories_in_graph(self, graph_storage: Any) -> None:
        """
        V√©rifie et cr√©e les n≈ìuds de cat√©gories dans le graphe s'ils n'existent pas
        
        :param graph_storage: Instance de stockage de graphe (Neo4j ou √©quivalent)
        """
        # Liste des cat√©gories √† cr√©er
        categories_to_create = self.list_categories()
        
        async def create_categories_tx(tx):
            for category in categories_to_create:
                if category == "Unknown":
                    continue
                
                # Requ√™te pour cr√©er le n≈ìud de cat√©gorie si non existant
                query = f"""
                MERGE (cat:ActivityCategory {{name: $category_name}})
                RETURN cat.name
                """
                
                try:
                    result = await tx.run(query, category_name=category)
                    await result.consume()
                except Exception as e:
                    logger.warning(f"‚ùå Erreur lors de la cr√©ation de la cat√©gorie {category} : {e}")
        
        try:
            async with graph_storage._driver.session() as session:
                await session.execute_write(create_categories_tx)
            logger.info("‚úÖ Toutes les cat√©gories d'activit√©s ont √©t√© initialis√©es dans le graphe.")
        except Exception as e:
            logger.warning(f"‚ùå Erreur lors de l'initialisation des cat√©gories : {e}")

# Instance globale pour √™tre utilis√©e facilement
activity_categories_manager = ActivityCategoriesManager()
